/* automatically generated by rust-bindgen 0.59.2 */

#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const RSB_BOOL_TRUE: u32 = 1;
pub const RSB_BOOL_FALSE: u32 = 0;
pub const RSB_DEFAULT_ROW_BLOCKING: u32 = 1;
pub const RSB_DEFAULT_COL_BLOCKING: u32 = 1;
pub const RSB_DEFAULT_BLOCKING: u32 = 1;
pub const RSB_CHAR_BIT: u32 = 8;
pub const RSB_MIN_MATRIX_DIM: u32 = 0;
pub const RSB_MIN_MATRIX_NNZ: u32 = 0;
pub const RSB_NNZ_BLK_MAX: u32 = 255;
pub const RSB_FLAG_NOFLAGS: u32 = 0;
pub const RSB_FLAG_IDENTICAL_FLAGS: u32 = 0;
pub const RSB_FLAG_FORTRAN_INDICES_INTERFACE: u32 = 1;
pub const RSB_FLAG_C_INDICES_INTERFACE: u32 = 0;
pub const RSB_FLAG_USE_HALFWORD_INDICES: u32 = 2;
pub const RSB_FLAG_WANT_ROW_MAJOR_ORDER: u32 = 0;
pub const RSB_FLAG_WANT_COLUMN_MAJOR_ORDER: u32 = 67108864;
pub const RSB_FLAG_SORTED_INPUT: u32 = 4;
pub const RSB_FLAG_TRIANGULAR: u32 = 8;
pub const RSB_FLAG_LOWER: u32 = 16;
pub const RSB_FLAG_UPPER: u32 = 32;
pub const RSB_FLAG_UNIT_DIAG_IMPLICIT: u32 = 64;
pub const RSB_FLAG_WANT_COO_STORAGE: u32 = 256;
pub const RSB_FLAG_DUPLICATES_KEEP_LAST: u32 = 0;
pub const RSB_FLAG_DUPLICATES_DEFAULT_HANDLE: u32 = 0;
pub const RSB_FLAG_DUPLICATES_SUM: u32 = 512;
pub const RSB_FLAG_DISCARD_ZEROS: u32 = 1024;
pub const RSB_FLAG_QUAD_PARTITIONING: u32 = 8192;
pub const RSB_FLAG_WANT_BCSS_STORAGE: u32 = 16384;
pub const RSB_FLAG_ASSEMBLED_IN_COO_ARRAYS: u32 = 262144;
pub const RSB_FLAG_EXPERIMENTAL_IN_PLACE_PERMUTATION_SORT: u32 = 524288;
pub const RSB_FLAG_SYMMETRIC: u32 = 4194304;
pub const RSB_FLAG_HERMITIAN: u32 = 8388608;
pub const RSB_FLAG_RECURSIVE_MORE_LEAVES_THAN_THREADS: u32 = 16777216;
pub const RSB_FLAG_LOWER_HERMITIAN: u32 = 8388624;
pub const RSB_FLAG_UPPER_HERMITIAN: u32 = 8388640;
pub const RSB_FLAG_LOWER_TRIANGULAR: u32 = 24;
pub const RSB_FLAG_UPPER_TRIANGULAR: u32 = 40;
pub const RSB_FLAG_LOWER_SYMMETRIC: u32 = 4194320;
pub const RSB_FLAG_DIAGONAL: u32 = 48;
pub const RSB_FLAG_UPPER_SYMMETRIC: u32 = 4194336;
pub const RSB_FLAG_RECURSIVE_SUBDIVIDE_MORE_ON_DIAG: u32 = 134217728;
pub const RSB_FLAG_EXTERNALLY_ALLOCATED_ARRAYS: u32 = 1073741824;
pub const RSB_FLAG_USE_CSR_RESERVED: u32 = 2097152;
pub const RSB_FLAG_USE_HALFWORD_INDICES_CSR: u32 = 2097154;
pub const RSB_FLAG_USE_HALFWORD_INDICES_COO: u32 = 258;
pub const RSB_FLAG_MUTUALLY_EXCLUSIVE_SWITCHES: u32 = 2097410;
pub const RSB_PROGRAM_SUCCESS: u32 = 0;
pub const RSB_PROGRAM_ERROR: u32 = 1;
pub const RSB_IO_SPECIFIER_GET: u32 = 1;
pub const RSB_IO_SPECIFIER_SET: u32 = 0;
pub const RSB_MARF_RGB: u32 = 1;
pub const RSB_MARF_EPS_S: u32 = 16;
pub const RSB_MARF_EPS_B: u32 = 32;
pub const RSB_MARF_EPS: u32 = 48;
pub const RSB_MARF_EPS_L: u32 = 112;
pub const RSB_PRECF_ILU0: u32 = 1;
pub const _COMPLEX_H: u32 = 1;
pub const RSB_LIBRSB_VER_STRING: &[u8; 6usize] = b"1.2.0\0";
pub const RSB_HEADER_VERSION_STRING: &[u8; 60usize] =
    b"librsb version 1.2.RSB_M4_WANT_LIBRSB_VER_PATCH9 - 20201204\0";
pub const RSB_LIBRSB_VER_MAJOR: u32 = 1;
pub const RSB_LIBRSB_VER_MINOR: u32 = 2;
pub const RSB_LIBRSB_VER_PATCH: u32 = 0;
pub const RSB_LIBRSB_VER: u32 = 10201;
pub const RSB_LIBRSB_VER_DATE: u32 = 20201204;
pub const RSB_HAVE_TYPE_DOUBLE: u32 = 1;
pub const RSB_HAVE_TYPE_FLOAT: u32 = 1;
pub const RSB_HAVE_TYPE_FLOAT_COMPLEX: u32 = 1;
pub const RSB_HAVE_TYPE_DOUBLE_COMPLEX: u32 = 1;
pub const RSB_DEFAULT_TYPE_STRING: &[u8; 7usize] = b"double\0";
pub const RSB_DEFAULT_POSSIBLY_INTEGER_TYPE_STRING: &[u8; 7usize] = b"double\0";
pub const RSB_TYPE_INDEX_DOUBLE: u32 = 0;
pub const RSB_TYPE_INDEX_FLOAT: u32 = 1;
pub const RSB_TYPE_INDEX_FLOAT_COMPLEX: u32 = 2;
pub const RSB_TYPE_INDEX_DOUBLE_COMPLEX: u32 = 3;
pub const RSB_HAVE_OPTYPE_SPMV_UAUA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPMV_UAUZ: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPMV_UXUA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPMV_UNUA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPMV_SASA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPSV_UXUA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPMV_SXSA: u32 = 1;
pub const RSB_HAVE_OPTYPE_SPSV_SXSX: u32 = 1;
pub const RSB_HAVE_OPTYPE_INFTY_NORM: u32 = 1;
pub const RSB_HAVE_OPTYPE_ROWSSUMS: u32 = 1;
pub const RSB_HAVE_OPTYPE_SCALE: u32 = 1;
pub const RSB_OPTYPE_INDEX_SPMV_UAUA: u32 = 0;
pub const RSB_OPTYPE_INDEX_SPMV_UAUZ: u32 = 1;
pub const RSB_OPTYPE_INDEX_SPMV_UXUA: u32 = 2;
pub const RSB_OPTYPE_INDEX_SPMV_UNUA: u32 = 3;
pub const RSB_OPTYPE_INDEX_SPMV_SASA: u32 = 4;
pub const RSB_OPTYPE_INDEX_SPSV_UXUA: u32 = 5;
pub const RSB_OPTYPE_INDEX_SPMV_SXSA: u32 = 6;
pub const RSB_OPTYPE_INDEX_SPSV_SXSX: u32 = 7;
pub const RSB_OPTYPE_INDEX_INFTY_NORM: u32 = 8;
pub const RSB_OPTYPE_INDEX_ROWSSUMS: u32 = 9;
pub const RSB_OPTYPE_INDEX_SCALE: u32 = 10;
pub const RSB_OPTYPE_INDEX_MAT_STATS: u32 = 11;
pub const RSB_COORDINATE_TYPE_C: u32 = 1;
pub const RSB_COORDINATE_TYPE_H: u32 = 2;
pub const RSB_TRANSPOSITION_N: u32 = 78;
pub const RSB_TRANSPOSITION_T: u32 = 84;
pub const RSB_TRANSPOSITION_C: u32 = 67;
pub const RSB_TRANSPOSITION_INVALID: u32 = 63;
pub const RSB_SYMMETRY_U: u32 = 0;
pub const RSB_SYMMETRY_S: u32 = 4194304;
pub const RSB_SYMMETRY_H: u32 = 8388608;
pub const RSB_DIAGONAL_E: u32 = 1;
pub const RSB_DIAGONAL_I: u32 = 2;
pub const RSB_MATRIX_STORAGE_BCOR: u32 = 64;
pub const RSB_MATRIX_STORAGE_BCSR: u32 = 1;
pub const RSB_MATRIX_STORAGE_BCOR_STRING: &[u8; 5usize] = b"BCOR\0";
pub const RSB_MATRIX_STORAGE_BCSR_STRING: &[u8; 5usize] = b"BCSR\0";
pub const RSB_NUMERICAL_TYPE_SAME_TYPE: u32 = 1;
pub const RSB_NUMERICAL_TYPE_DOUBLE: u8 = 68u8;
pub const RSB_NUMERICAL_TYPE_FLOAT: u8 = 83u8;
pub const RSB_NUMERICAL_TYPE_FLOAT_COMPLEX: u8 = 67u8;
pub const RSB_NUMERICAL_TYPE_DOUBLE_COMPLEX: u8 = 90u8;
pub const RSB_NUMERICAL_TYPE_FORTRAN_SAME_TYPE: u32 = 1;
pub const RSB_NUMERICAL_TYPE_DEFAULT: u8 = 68u8;
pub const RSB_NUMERICAL_TYPE_DEFAULT_INTEGER: u8 = 68u8;
pub const RSB_NUMERICAL_TYPE_INVALID_TYPE: u8 = 63u8;
pub const RSB_NUMERICAL_TYPE_FIRST_BLAS: u8 = 83u8;
pub const RSB_CONST_MAX_TUNING_ROUNDS: u32 = 16;
pub const RSB_NUMERICAL_TYPE_PREPROCESSOR_SYMBOLS: &[u8; 9usize] = b"D S C Z \0";
pub const RSB_NUMERICAL_TYPE_PATTERN: u32 = 0;
pub const RSB_MATRIX_STORAGE_DOUBLE_PRINTF_STRING: &[u8; 6usize] = b"%.17g\0";
pub const RSB_MATRIX_STORAGE_FLOAT_PRINTF_STRING: &[u8; 5usize] = b"%.9g\0";
pub const RSB_MATRIX_STORAGE_FLOAT_COMPLEX_PRINTF_STRING: &[u8; 10usize] = b"%.9g %.9g\0";
pub const RSB_MATRIX_STORAGE_DOUBLE_COMPLEX_PRINTF_STRING: &[u8; 12usize] = b"%.17g %.17g\0";
pub const RSB_TRANSPOSITIONS_PREPROCESSOR_SYMBOLS: &[u8; 7usize] = b"n t c \0";
pub const RSB_MAXIMAL_CONFIGURED_BLOCK_SIZE: u32 = 1;
pub const RSB_MAXIMAL_CONFIGURED_BLOCK_SIZE_EXTRA: u32 = 0;
pub const RSB_CONST_MATRIX_IMPLEMENTATION_CODE_STRING_MAX_LENGTH: u32 = 2048;
pub const RSB_ROWS_UNROLL_ARRAY_LENGTH: u32 = 1;
pub const RSB_COLUMNS_UNROLL_ARRAY_LENGTH: u32 = 1;
pub const RSB_IMPLEMENTED_META_MOPS: u32 = 12;
pub const RSB_IMPLEMENTED_MOPS: u32 = 11;
pub const RSB_IMPLEMENTED_TYPES: u32 = 4;
pub const RSB_IMPLEMENTED_SOME_BLAS_TYPES: u32 = 1;
pub const RSB_M4_MATRIX_META_OPS_STRING : & [u8 ; 106usize] = b"spmv_uaua,spmv_uauz,spmv_uxua,spmv_unua,spmv_sasa,spsv_uxua,spmv_sxsa,spsv_sxsx,infty_norm,rowssums,scale\0" ;
pub const RSB_M4_MATRIX_TYPES_STRING: &[u8; 42usize] =
    b"double,float,float complex,double complex\0";
pub const RSB_M4_WANT_COLUMN_UNLOOP_FACTORS_STRING: &[u8; 2usize] = b"1\0";
pub const RSB_M4_WANT_ROW_UNLOOP_FACTORS_STRING: &[u8; 2usize] = b"1\0";
pub const RSB_CC: &[u8; 4usize] = b"gcc\0";
pub const RSB_CFLAGS: &[u8; 31usize] = b"-fPIC -g -O3 -fopenmp -std=c99\0";
pub const RSB_COPYRIGHT_STRING: &[u8; 40usize] = b"Copyright (c) 2008-2021 Michele Martone\0";
pub const RSB_HAVE_ASSERT_H: u32 = 1;
pub const RSB_HAVE_COMPLEX_H: u32 = 1;
pub const RSB_HAVE_CTYPE_H: u32 = 1;
pub const RSB_HAVE_DLFCN_H: u32 = 1;
pub const RSB_HAVE_DUP: u32 = 1;
pub const RSB_HAVE_FILENO: u32 = 1;
pub const RSB_HAVE_FREAD: u32 = 1;
pub const RSB_HAVE_FWRITE: u32 = 1;
pub const RSB_HAVE_GETENV: u32 = 1;
pub const RSB_HAVE_GETHOSTNAME: u32 = 1;
pub const RSB_HAVE_GETOPT_H: u32 = 1;
pub const RSB_HAVE_GETOPT_LONG: u32 = 1;
pub const RSB_HAVE_GETTIMEOFDAY: u32 = 1;
pub const RSB_HAVE_GSL_GSL_SORT_H: u32 = 1;
pub const RSB_HAVE_HWLOC_H: u32 = 1;
pub const RSB_HAVE_INTTYPES_H: u32 = 1;
pub const RSB_HAVE_ISATTY: u32 = 1;
pub const RSB_HAVE_LIBGEN_H: u32 = 1;
pub const RSB_HAVE_LIMITS_H: u32 = 1;
pub const RSB_HAVE_MALLOC_H: u32 = 1;
pub const RSB_HAVE_MATH_H: u32 = 1;
pub const RSB_HAVE_MEMALIGN: u32 = 1;
pub const RSB_HAVE_MEMORY_H: u32 = 1;
pub const RSB_HAVE_MEMSET: u32 = 1;
pub const RSB_HAVE_MLOCKALL: u32 = 1;
pub const RSB_HAVE_OMP_H: u32 = 1;
pub const RSB_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const RSB_HAVE_PTHREAD_H: u32 = 1;
pub const RSB_HAVE_RAND: u32 = 1;
pub const RSB_HAVE_REGEX_H: u32 = 1;
pub const RSB_HAVE_SCHED_GETAFFINITY: u32 = 1;
pub const RSB_HAVE_SCHED_H: u32 = 1;
pub const RSB_HAVE_SETENV: u32 = 1;
pub const RSB_HAVE_SIGNAL_H: u32 = 1;
pub const RSB_HAVE_STDARG_H: u32 = 1;
pub const RSB_HAVE_STDINT_H: u32 = 1;
pub const RSB_HAVE_STDIO_H: u32 = 1;
pub const RSB_HAVE_STDLIB_H: u32 = 1;
pub const RSB_HAVE_STRINGS_H: u32 = 1;
pub const RSB_HAVE_STRING_H: u32 = 1;
pub const RSB_HAVE_STRNCMP: u32 = 1;
pub const RSB_HAVE_SYSCONF: u32 = 1;
pub const RSB_HAVE_SYS_MMAN_H: u32 = 1;
pub const RSB_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const RSB_HAVE_SYS_STAT_H: u32 = 1;
pub const RSB_HAVE_SYS_TYPES_H: u32 = 1;
pub const RSB_HAVE_SYS_UTSNAME_H: u32 = 1;
pub const RSB_HAVE_TIMES: u32 = 1;
pub const RSB_HAVE_TIME_H: u32 = 1;
pub const RSB_HAVE_UNISTD_H: u32 = 1;
pub const RSB_HAVE_VPRINTF: u32 = 1;
pub const RSB_HAVE_ZLIB_H: u32 = 1;
pub const RSB_LT_OBJDIR: &[u8; 7usize] = b".libs/\0";
pub const RSB_PACKAGE: &[u8; 7usize] = b"librsb\0";
pub const RSB_PACKAGE_BUGREPORT: &[u8; 48usize] =
    b"michelemartone_AT_users_DOT_sourceforge_DOT_net\0";
pub const RSB_PACKAGE_NAME: &[u8; 7usize] = b"librsb\0";
pub const RSB_PACKAGE_STRING: &[u8; 16usize] = b"librsb 1.2.0.10\0";
pub const RSB_PACKAGE_TARNAME: &[u8; 7usize] = b"librsb\0";
pub const RSB_PACKAGE_URL: &[u8; 1usize] = b"\0";
pub const RSB_PACKAGE_VERSION: &[u8; 9usize] = b"1.2.0.10\0";
pub const RSB_BLOCK_SMALL_INDICES: u32 = 1;
pub const RSB_CONST_MAX_SUPPORTED_THREADS: u32 = 160;
pub const RSB_DETECTED_MEM_HIERARCHY_INFO: &[u8; 41usize] =
    b"L3:16/64/12288K,L2:4/64/256K,L1:8/64/32K\0";
pub const RSB_DISABLE_ALLOCATOR_WRAPPER: u32 = 1;
pub const RSB_INT_ERR_VERBOSITY: u32 = 0;
pub const RSB_OUT_ERR_VERBOSITY: u32 = 0;
pub const RSB_SORT_IN_PLACE: u32 = 0;
pub const RSB_USER_SET_MEM_HIERARCHY_INFO: &[u8; 1usize] = b"\0";
pub const RSB_WANT_ACTION_SIGNAL: u32 = 1;
pub const RSB_WANT_ALLOCATOR_LIMITS: u32 = 0;
pub const RSB_WANT_DMALLOC: u32 = 0;
pub const RSB_WANT_DOUBLE_ALIGNED: u32 = 1;
pub const RSB_WANT_IO_LEVEL: u32 = 7;
pub const RSB_WANT_KERNELS_DEBUG: u32 = 1;
pub const RSB_WANT_MKL: u32 = 0;
pub const RSB_WANT_OMPIO_SUPPORT: u32 = 0;
pub const RSB_WANT_OMP_RECURSIVE_KERNELS: u32 = 1;
pub const RSB_WANT_SPARSE_BLAS_LEVEL_1: u32 = 1;
pub const RSB_WANT_VERBOSE_MESSAGES: u32 = 0;
pub const RSB_WANT_XDR_SUPPORT: u32 = 0;
pub const RSB_WANT_ZLIB_SUPPORT: u32 = 0;
pub const RSB_WITH_HWLOC: u32 = 0;
pub const RSB_WITH_LIKWID: u32 = 0;
pub const RSB_WITH_SPARSE_BLAS_INTERFACE: u32 = 1;
pub const RSB_SIZEOF_CHAR: u32 = 1;
pub const RSB_SIZEOF_COMPLEX: u32 = 0;
pub const RSB_SIZEOF_DOUBLE: u32 = 8;
pub const RSB_SIZEOF_DOUBLE_COMPLEX: u32 = 0;
pub const RSB_SIZEOF_FLOAT: u32 = 4;
pub const RSB_SIZEOF_FLOAT_COMPLEX: u32 = 0;
pub const RSB_SIZEOF_INT: u32 = 4;
pub const RSB_SIZEOF_LONG: u32 = 8;
pub const RSB_SIZEOF_LONG_DOUBLE: u32 = 16;
pub const RSB_SIZEOF_LONG_INT: u32 = 8;
pub const RSB_SIZEOF_LONG_LONG_INT: u32 = 8;
pub const RSB_SIZEOF_SHORT_INT: u32 = 2;
pub const RSB_SIZEOF_SIZE_T: u32 = 8;
pub const RSB_SIZEOF_VOID_P: u32 = 8;
pub const RSB_STDC_HEADERS: u32 = 1;
pub const RSB_SVN_REVISION: &[u8; 22usize] = b"Unversioned directory\0";
pub const RSB_VERSION: &[u8; 9usize] = b"1.2.0.10\0";
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
#[doc = "\\name Type definitions"]
#[doc = "\\anchor definitions_section"]
#[doc = ""]
#[doc = "These are definitions of \\librsb base types."]
#[doc = " The block arrays index type."]
#[doc = ""]
#[doc = " Could be an unsigned type."]
#[doc = " Should not overflow when indexing matrix blocks by block coordinates."]
pub type rsb_blk_idx_t = ::std::os::raw::c_int;
#[doc = " The coordinate arrays index type."]
#[doc = ""]
#[doc = " Should not overflow when indexing matrix elements by coordinates."]
#[doc = " Legal values when specifying a matrix size should be within #RSB_MIN_MATRIX_DIM and #RSB_MAX_MATRIX_DIM"]
pub type rsb_coo_idx_t = ::std::os::raw::c_int;
#[doc = " The nnz counter index type."]
#[doc = ""]
#[doc = " Should not overflow when indexing matrix elements."]
#[doc = " On most common archs sizeof(long)>=sizeof(int)."]
#[doc = " Legal values when specifying a matrix size should be within #RSB_MIN_MATRIX_NNZ and #RSB_MAX_MATRIX_NNZ"]
pub type rsb_nnz_idx_t = ::std::os::raw::c_int;
#[doc = "A type for specifying matrix assembly or coordinate conversions option flags."]
#[doc = "Should be >= 4 bytes."]
#[doc = "See \\ref flags_section for possible values."]
pub type rsb_flags_t = ::std::os::raw::c_int;
#[doc = "A type for specifying numerical type codes (See \\ref matrix_type_symbols_section for a list of valid values)."]
pub type rsb_type_t = ::std::os::raw::c_char;
#[doc = "A type specific for error flags."]
#[doc = "Should be >= 4 bytes."]
#[doc = ""]
#[doc = "A textual description of an error value may be obtained via #rsb_strerror_r() or #rsb_perror()."]
pub type rsb_err_t = ::std::os::raw::c_int;
#[doc = "An integer type declaration for interface functions."]
#[doc = "Should always be 'int'."]
pub type rsb_int_t = ::std::os::raw::c_int;
#[doc = " A boolean type."]
pub type rsb_bool_t = rsb_flags_t;
#[doc = " The type for specifying transposition (See \\ref matrix_transposition_flags_section)"]
pub type rsb_trans_t = rsb_flags_t;
#[doc = "  A floating point numerical type."]
pub type rsb_real_t = f64;
#[doc = "A type for character strings."]
pub type rsb_char_t = ::std::os::raw::c_char;
#[doc = "  A floating point numerical type for time measurements with #rsb_time()."]
pub type rsb_time_t = rsb_real_t;
extern "C" {
    pub fn rsb_strerror_r(errval: rsb_err_t, buf: *mut rsb_char_t, buflen: size_t) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_perror(stream: *mut ::std::os::raw::c_void, errval: rsb_err_t) -> rsb_err_t;
}
#[doc = " #RSB_IO_WANT_VERBOSE_INIT prompts for a verbose initialization of the library: messages will be written"]
#[doc = " to the file descriptor (\\c FILE*) pointed by the value pointer when calling \\ref rsb_lib_init."]
pub const rsb_opt_t_RSB_IO_WANT_VERBOSE_INIT: rsb_opt_t = 1;
#[doc = " #RSB_IO_WANT_VERBOSE_EXIT prompts for a verbose finalization of the library: messages will be written"]
#[doc = " to the file descriptor (\\c FILE*) pointed by the value pointer when calling \\ref rsb_lib_exit."]
pub const rsb_opt_t_RSB_IO_WANT_VERBOSE_EXIT: rsb_opt_t = 2;
#[doc = " Specifies the default output stream. Output (debug info) info will be written"]
#[doc = " to the file descriptor (\\c FILE*) pointed by the value pointer."]
pub const rsb_opt_t_RSB_IO_WANT_OUTPUT_STREAM: rsb_opt_t = 3;
#[doc = " Specifies the default sorting method. Specified as a pointed integer (#rsb_int_t) number, in {[0],1}. (internal)"]
pub const rsb_opt_t_RSB_IO_WANT_SORT_METHOD: rsb_opt_t = 4;
#[doc = " Specifies the default cache blocking method. Specified as a pointed integer (#rsb_int_t) number, in {-1,[0],1}. (internal)"]
pub const rsb_opt_t_RSB_IO_WANT_CACHE_BLOCKING_METHOD: rsb_opt_t = 5;
#[doc = " Specifies a multiplier for finer (if >1.0) or coarser (if <1.0) subdivisions. Specified as a pointed (#rsb_real_t) number, in {..,[1.0],..}. (internal)"]
pub const rsb_opt_t_RSB_IO_WANT_SUBDIVISION_MULTIPLIER: rsb_opt_t = 6;
#[doc = " Prompts for a verbose error reporting: messages will be written"]
#[doc = " to the file descriptor (\\c FILE*) pointed by the value pointer. Only meaningful if an"]
#[doc = " interface error verbosity greater than 0 was set at configure time."]
pub const rsb_opt_t_RSB_IO_WANT_VERBOSE_ERRORS: rsb_opt_t = 7;
#[doc = " Prompts for bounded box computation, for a smoother submatrices locking; pointed #rsb_int_t in {0,[1]}. (internal)."]
pub const rsb_opt_t_RSB_IO_WANT_BOUNDED_BOX_COMPUTATION: rsb_opt_t = 8;
#[doc = " Specifies the number of desired executing threads; pointed #rsb_int_t in {[0],1,..}."]
pub const rsb_opt_t_RSB_IO_WANT_EXECUTING_THREADS: rsb_opt_t = 9;
#[doc = " Specifies the level of interface verbosity; if setting, pointed #rsb_int_t values should be in {[0],1,..}. Support may be enabled or disabled at build time via the \\c --enable-internals-error-verbosity configure option. If disabled, only getting is supported and yields -1, but setting is not supported and the #RSB_ERR_NO_STREAM_OUTPUT_CONFIGURED_OUT error will be returned."]
pub const rsb_opt_t_RSB_IO_WANT_EXTRA_VERBOSE_INTERFACE: rsb_opt_t = 16;
#[doc = " Specifies a custom memory hierarchy info string; pointed \\c const #rsb_char_t*; (may point to a NULL string pointer)."]
pub const rsb_opt_t_RSB_IO_WANT_MEMORY_HIERARCHY_INFO_STRING: rsb_opt_t = 17;
#[doc = " Used for getting whether the library has been initialized (#RSB_BOOL_TRUE) or not (#RSB_BOOL_FALSE) ; pointed \\c const #rsb_bool_t*; (this is NOT for general users)."]
pub const rsb_opt_t_RSB_IO_WANT_IS_INITIALIZED_MARKER: rsb_opt_t = 18;
#[doc = " Used for getting the count of memory allocations performed by librsb employing librsb's memory allocation wrapper (if disabled, will return zero); pointed \\c const \\c size_t*; (this is for debugging purposes)."]
pub const rsb_opt_t_RSB_IO_WANT_MEM_ALLOC_CNT: rsb_opt_t = 19;
#[doc = " Used for getting the total amount of memory allocated by librsb employing librsb's memory allocation wrapper (if disabled, will return zero); pointed \\c const \\c size_t*; (this is for debugging purposes)."]
pub const rsb_opt_t_RSB_IO_WANT_MEM_ALLOC_TOT: rsb_opt_t = 20;
#[doc = " Specifies whether the default multi-vector ops shall act at a leaf level (default value of 0 is yes). Specified as a pointed integer (#rsb_int_t) number, in {-1,[0]}. (internal)"]
pub const rsb_opt_t_RSB_IO_WANT_LEAF_LEVEL_MULTIVEC: rsb_opt_t = 21;
#[doc = " Specifies an upper limit to the count of allocated memory areas (default value of 0 means no limit). Specified as a pointed \\c size_t. \\rsb_configure_memwrap"]
pub const rsb_opt_t_RSB_IO_WANT_MAX_MEMORY_ALLOCATIONS: rsb_opt_t = 22;
#[doc = " Specifies an upper limit to the amount of allocated memory (default value of 0 means no limit). Specified as a pointed \\c size_t. \\rsb_configure_memwrap"]
pub const rsb_opt_t_RSB_IO_WANT_MAX_MEMORY_ALLOCATED: rsb_opt_t = 23;
#[doc = " Represents time spent in librsb. Specified as a pointed #rsb_time_t. Only works if statistics collection (\\c --enable-librsb-stats) was specified at configure time."]
pub const rsb_opt_t_RSB_IO_WANT_LIBRSB_ETIME: rsb_opt_t = 24;
#[doc = " Auto tuning verbosity level for rsb_tune_spmm/rsb_tune_spsm. If 0, no verbosity; if 1, verbose; if 2, verbose with trace files being dumped."]
pub const rsb_opt_t_RSB_IO_WANT_VERBOSE_TUNING: rsb_opt_t = 25;
#[doc = " \\ingroup rsb_doc_misc rsb_doc_rsb"]
#[doc = "\\brief library option values for \\see_lib_init_funcs."]
pub type rsb_opt_t = ::std::os::raw::c_uint;
#[doc = " @brief A structure specifying library (initialization) options, to be used with the \\ref rsb_lib_reinit() function."]
#[doc = " \\n"]
#[doc = ""]
#[doc = " The structure specifies, for \\c i=0,..,n_pairs-1 , a list of (key,value)"]
#[doc = " pairs, stored respectively as (\\c keys[i],values[i])."]
#[doc = " \\n"]
#[doc = " Each flag specifies the type and possible range of values it accepts."]
#[doc = " \\n"]
#[doc = " The structure may he used to set or query various library parameters."]
#[doc = ""]
#[doc = " Example:"]
#[doc = " \\code"]
#[doc = "const int max_io=10; // the number of different options we want to set"]
#[doc = "struct rsb_initopts io={NULL,NULL,0,RSB_IO_SPECIFIER_SET},"]
#[doc = "iop=&io; // pointer to the options structure"]
#[doc = "void * io_values[max_io]; // an array of pointers to max_io different option values (we shall set)"]
#[doc = "enum rsb_opt_t io_keys[max_io]; // an array of max_io flag values specifying the type of values we are handing over to the library"]
#[doc = "io.keys=io_keys; // io.keys will now point to io_keys as its keys array"]
#[doc = "io.values=io_values; // io.values will now point to io_keys as its values array"]
#[doc = "io.n_pairs=0; // we have 0 pairs specified so far"]
#[doc = "io.keys[io.n_pairs]=RSB_IO_WANT_BOUNDED_BOX_COMPUTATION; // the first (at index 0) option we want to specify is RSB_IO_WANT_BOUNDED_BOX_COMPUTATION"]
#[doc = "io.values[io.n_pairs]=1; // the value we want to set the RSB_IO_WANT_BOUNDED_BOX_COMPUTATION option to"]
#[doc = "io.n_pairs++; // io.n_pairs is set to 1: we have one option set, so even if we have (max_io-io.n_pairs) left, only the first will be read"]
#[doc = "... // we are free to specify other option (type, value) pairs"]
#[doc = " \\endcode"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsb_initopts {
    #[doc = " An array of value types key flags."]
    pub keys: *mut rsb_opt_t,
    #[doc = " An array of value pointers, as specified by each flag value."]
    pub values: *mut *mut ::std::os::raw::c_void,
    #[doc = " The length of the \\c keys and \\c values arrays."]
    pub n_pairs: rsb_int_t,
    #[doc = " The action we are requesting (either one of #RSB_IO_SPECIFIER_GET or #RSB_IO_SPECIFIER_SET)"]
    pub action: rsb_int_t,
}
#[test]
fn bindgen_test_layout_rsb_initopts() {
    assert_eq!(
        ::std::mem::size_of::<rsb_initopts>(),
        24usize,
        concat!("Size of: ", stringify!(rsb_initopts))
    );
    assert_eq!(
        ::std::mem::align_of::<rsb_initopts>(),
        8usize,
        concat!("Alignment of ", stringify!(rsb_initopts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsb_initopts>())).keys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rsb_initopts),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsb_initopts>())).values as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rsb_initopts),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsb_initopts>())).n_pairs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rsb_initopts),
            "::",
            stringify!(n_pairs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rsb_initopts>())).action as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rsb_initopts),
            "::",
            stringify!(action)
        )
    );
}
extern "C" {
    pub fn rsb_lib_init(iop: *mut rsb_initopts) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_lib_reinit(iop: *mut rsb_initopts) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_lib_set_opt_str(opnp: *const rsb_char_t, opvp: *const rsb_char_t) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_lib_set_opt(iof: rsb_opt_t, iop: *const ::std::os::raw::c_void) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_lib_get_opt(iof: rsb_opt_t, iop: *mut ::std::os::raw::c_void) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_lib_exit(iop: *mut rsb_initopts) -> rsb_err_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rsb_mtx_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rsb_mtx_alloc_from_coo_begin(
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_coo_end(mtxApp: *mut *mut rsb_mtx_t) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_csr_const(
        VA: *const ::std::os::raw::c_void,
        RP: *const rsb_coo_idx_t,
        JA: *const rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        brA: rsb_blk_idx_t,
        bcA: rsb_blk_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_csc_const(
        VA: *const ::std::os::raw::c_void,
        IA: *const rsb_coo_idx_t,
        CP: *const rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        brA: rsb_blk_idx_t,
        bcA: rsb_blk_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_csr_inplace(
        VA: *mut ::std::os::raw::c_void,
        RP: *mut rsb_nnz_idx_t,
        JA: *mut rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        brA: rsb_blk_idx_t,
        bcA: rsb_blk_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_coo_const(
        VA: *const ::std::os::raw::c_void,
        IA: *const rsb_coo_idx_t,
        JA: *const rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        brA: rsb_blk_idx_t,
        bcA: rsb_blk_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_alloc_from_coo_inplace(
        VA: *mut ::std::os::raw::c_void,
        IA: *mut rsb_coo_idx_t,
        JA: *mut rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        typecode: rsb_type_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        brA: rsb_blk_idx_t,
        bcA: rsb_blk_idx_t,
        flagsA: rsb_flags_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_mtx_clone(
        mtxBpp: *mut *mut rsb_mtx_t,
        typecode: rsb_type_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_free(mtxAp: *mut rsb_mtx_t) -> *mut rsb_mtx_t;
}
#[doc = "< #rsb_mtx_get_nrm() flag value for computing the one-norm."]
pub const rsb_extff_t_RSB_EXTF_NORM_ONE: rsb_extff_t = 4097;
#[doc = "< #rsb_mtx_get_nrm() flag value for computing the two-norm (Frobenius norm)."]
pub const rsb_extff_t_RSB_EXTF_NORM_TWO: rsb_extff_t = 4098;
#[doc = "< #rsb_mtx_get_nrm() flag value for computing the infinity-norm."]
pub const rsb_extff_t_RSB_EXTF_NORM_INF: rsb_extff_t = 4099;
#[doc = "< #rsb_mtx_get_vec() flag value for computing the sum along each row."]
pub const rsb_extff_t_RSB_EXTF_SUMS_ROW: rsb_extff_t = 4100;
#[doc = "< #rsb_mtx_get_vec() flag value for computing the sum along each column."]
pub const rsb_extff_t_RSB_EXTF_SUMS_COL: rsb_extff_t = 4101;
#[doc = "< #rsb_mtx_get_vec() flag value for computing the absolute values sum, along each row."]
pub const rsb_extff_t_RSB_EXTF_ASUMS_ROW: rsb_extff_t = 4102;
#[doc = "< #rsb_mtx_get_vec() flag value for computing the absolute values sum, along each column."]
pub const rsb_extff_t_RSB_EXTF_ASUMS_COL: rsb_extff_t = 4103;
#[doc = "< #rsb_mtx_get_vec() flag value for extracting the diagonal submatrix."]
pub const rsb_extff_t_RSB_EXTF_DIAG: rsb_extff_t = 4;
#[doc = " \\ingroup rsb_doc_misc rsb_doc_rsb"]
#[doc = "\\brief Extraction filter flags, to be used with #rsb_mtx_get_nrm()/#rsb_mtx_get_vec()."]
pub type rsb_extff_t = ::std::os::raw::c_uint;
pub type rsb_marf_t = rsb_flags_t;
extern "C" {
    #[doc = "@}"]
    pub fn rsb_mtx_get_nrm(
        mtxAp: *const rsb_mtx_t,
        Np: *mut ::std::os::raw::c_void,
        flags: rsb_extff_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_vec(
        mtxAp: *const rsb_mtx_t,
        Dp: *mut ::std::os::raw::c_void,
        flags: rsb_extff_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_rndr(
        filename: *const rsb_char_t,
        mtxAp: *const rsb_mtx_t,
        pmWidth: rsb_coo_idx_t,
        pmHeight: rsb_coo_idx_t,
        rflags: rsb_marf_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_file_mtx_rndr(
        pmp: *mut ::std::os::raw::c_void,
        filename: *const rsb_char_t,
        pmlWidth: rsb_coo_idx_t,
        pmWidth: rsb_coo_idx_t,
        pmHeight: rsb_coo_idx_t,
        rflags: rsb_marf_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_spmv(
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        Xp: *const ::std::os::raw::c_void,
        incX: rsb_coo_idx_t,
        betap: *const ::std::os::raw::c_void,
        Yp: *mut ::std::os::raw::c_void,
        incY: rsb_coo_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_spmm(
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        nrhs: rsb_coo_idx_t,
        order: rsb_flags_t,
        Bp: *const ::std::os::raw::c_void,
        ldB: rsb_nnz_idx_t,
        betap: *const ::std::os::raw::c_void,
        Cp: *mut ::std::os::raw::c_void,
        ldC: rsb_nnz_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_spsv(
        transT: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxTp: *const rsb_mtx_t,
        Xp: *const ::std::os::raw::c_void,
        incX: rsb_coo_idx_t,
        Yp: *mut ::std::os::raw::c_void,
        incY: rsb_coo_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_spsm(
        transT: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxTp: *const rsb_mtx_t,
        nrhs: rsb_coo_idx_t,
        order: rsb_flags_t,
        betap: *const ::std::os::raw::c_void,
        Bp: *const ::std::os::raw::c_void,
        ldB: rsb_nnz_idx_t,
        Cp: *mut ::std::os::raw::c_void,
        ldC: rsb_nnz_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_add_to_dense(
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        ldB: rsb_nnz_idx_t,
        nrB: rsb_nnz_idx_t,
        ncB: rsb_nnz_idx_t,
        rowmajorB: rsb_bool_t,
        Bp: *mut ::std::os::raw::c_void,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_sppsp(
        typecode: rsb_type_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        transB: rsb_trans_t,
        betap: *const ::std::os::raw::c_void,
        mtxBp: *const rsb_mtx_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_spmsp(
        typecode: rsb_type_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        transB: rsb_trans_t,
        betap: *const ::std::os::raw::c_void,
        mtxBp: *const rsb_mtx_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_spmsp_to_dense(
        typecode: rsb_type_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        transB: rsb_trans_t,
        betap: *const ::std::os::raw::c_void,
        mtxBp: *const rsb_mtx_t,
        ldC: rsb_nnz_idx_t,
        nrC: rsb_nnz_idx_t,
        ncC: rsb_nnz_idx_t,
        rowmajorC: rsb_bool_t,
        Cp: *mut ::std::os::raw::c_void,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_switch_to_coo(
        mtxAp: *mut rsb_mtx_t,
        VAp: *mut *mut ::std::os::raw::c_void,
        IAp: *mut *mut rsb_coo_idx_t,
        JAp: *mut *mut rsb_coo_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_switch_to_csr(
        mtxAp: *mut rsb_mtx_t,
        VAp: *mut *mut ::std::os::raw::c_void,
        IAp: *mut *mut rsb_coo_idx_t,
        JAp: *mut *mut rsb_coo_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_coo(
        mtxAp: *const rsb_mtx_t,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut rsb_coo_idx_t,
        JA: *mut rsb_coo_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_csr(
        typecode: rsb_type_t,
        mtxAp: *const rsb_mtx_t,
        VA: *mut ::std::os::raw::c_void,
        RP: *mut rsb_nnz_idx_t,
        JA: *mut rsb_coo_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_rows_sparse(
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut rsb_coo_idx_t,
        JA: *mut rsb_coo_idx_t,
        frA: rsb_coo_idx_t,
        lrA: rsb_coo_idx_t,
        rnzp: *mut rsb_nnz_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_coo_block(
        mtxAp: *const rsb_mtx_t,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut rsb_coo_idx_t,
        JA: *mut rsb_coo_idx_t,
        frA: rsb_coo_idx_t,
        lrA: rsb_coo_idx_t,
        fcA: rsb_coo_idx_t,
        lcA: rsb_coo_idx_t,
        IREN: *const rsb_coo_idx_t,
        JREN: *const rsb_coo_idx_t,
        rnzp: *mut rsb_nnz_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
#[doc = "< Index storage occupation, in bytes. (size_t)"]
pub const rsb_mif_t_RSB_MIF_INDEX_STORAGE_IN_BYTES__TO__SIZE_T: rsb_mif_t = 1;
#[doc = "< Index storage occupation per nnz, in bytes. (#rsb_real_t)"]
pub const rsb_mif_t_RSB_MIF_INDEX_STORAGE_IN_BYTES_PER_NNZ__TO__RSB_REAL_T: rsb_mif_t = 2;
#[doc = "< Rows count(#rsb_coo_idx_t)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_ROWS__TO__RSB_COO_INDEX_T: rsb_mif_t = 4;
#[doc = "< Columns count (#rsb_coo_idx_t)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_COLS__TO__RSB_COO_INDEX_T: rsb_mif_t = 8;
#[doc = "< Nonzeroes count (#rsb_nnz_idx_t)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_NNZ__TO__RSB_NNZ_INDEX_T: rsb_mif_t = 16;
#[doc = "< Total size, in bytes (size_t)"]
pub const rsb_mif_t_RSB_MIF_TOTAL_SIZE__TO__SIZE_T: rsb_mif_t = 32;
#[doc = "< Matrix flags (#rsb_flags_t)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_FLAGS__TO__RSB_FLAGS_T: rsb_mif_t = 64;
#[doc = "< Matrix type code (#rsb_type_t)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_TYPECODE__TO__RSB_TYPE_T: rsb_mif_t = 128;
#[doc = "< Matrix info string, only for #rsb_mtx_get_info_str() (#rsb_char_t*)"]
pub const rsb_mif_t_RSB_MIF_MATRIX_INFO__TO__CHAR_P: rsb_mif_t = 256;
#[doc = "< Leaf submatrices count (#rsb_blk_idx_t)"]
pub const rsb_mif_t_RSB_MIF_LEAVES_COUNT__TO__RSB_BLK_INDEX_T: rsb_mif_t = 512;
#[doc = " \\ingroup rsb_doc_misc rsb_doc_rsb"]
#[doc = "\\brief Flags for getting matrix information via #rsb_mtx_get_info()/#rsb_mtx_get_info_str()."]
pub type rsb_mif_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rsb_mtx_get_info(
        mtxAp: *const rsb_mtx_t,
        miflags: rsb_mif_t,
        minfop: *mut ::std::os::raw::c_void,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_info_str(
        mtxAp: *const rsb_mtx_t,
        mis: *const rsb_char_t,
        minfop: *mut ::std::os::raw::c_void,
        buflen: size_t,
    ) -> rsb_err_t;
}
#[doc = "< Elemental multiplication of the matrix by a specified scalar (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_MUL: rsb_elopf_t = 1;
#[doc = "< Elemental division by a specified scalar (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_DIV: rsb_elopf_t = 2;
#[doc = "< Elemental power to a specified scalar (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_POW: rsb_elopf_t = 4;
#[doc = "< Elemental negation (usable with #rsb_mtx_upd_vals(), unary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_NEG: rsb_elopf_t = 8;
#[doc = "< Row    wise scaling by a specified scaling vector (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_SCALE_ROWS: rsb_elopf_t = 16;
#[doc = "< Column wise scaling by a specified scaling vector (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_SCALE_COLS: rsb_elopf_t = 32;
#[doc = "< Row    wise scaling by a specified scaling vector. If matrix is of a complex type, the argument is expected to be of the corresponding real type (assumed that that type has been enabled). (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_SCALE_ROWS_REAL: rsb_elopf_t = 64;
#[doc = "< Column wise scaling by a specified scaling vector. If matrix is of a complex type, the argument is expected to be of the corresponding real type (assumed that that type has been enabled). (usable with #rsb_mtx_upd_vals(), binary operation)."]
pub const rsb_elopf_t_RSB_ELOPF_SCALE_COLS_REAL: rsb_elopf_t = 128;
#[doc = " \\ingroup rsb_doc_misc rsb_doc_rsb"]
#[doc = "\\brief Flags for specifying a particular elemental/row-wise operation with #rsb_mtx_upd_vals()."]
pub type rsb_elopf_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn rsb_mtx_upd_vals(
        mtxAp: *mut rsb_mtx_t,
        elop_flags: rsb_elopf_t,
        omegap: *const ::std::os::raw::c_void,
    ) -> rsb_err_t;
}
pub type rsb_precf_t = rsb_flags_t;
extern "C" {
    pub fn rsb_mtx_get_prec(
        opdp: *mut ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        prec_flags: rsb_precf_t,
        ipdp: *const ::std::os::raw::c_void,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_set_vals(
        mtxAp: *mut rsb_mtx_t,
        VA: *const ::std::os::raw::c_void,
        IA: *const rsb_coo_idx_t,
        JA: *const rsb_coo_idx_t,
        nnz: rsb_nnz_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_mtx_get_vals(
        mtxAp: *const rsb_mtx_t,
        VA: *mut ::std::os::raw::c_void,
        IA: *const rsb_coo_idx_t,
        JA: *const rsb_coo_idx_t,
        nnz: rsb_nnz_idx_t,
        flags: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_tune_spmm(
        mtxOpp: *mut *mut rsb_mtx_t,
        sfp: *mut rsb_real_t,
        tnp: *mut rsb_int_t,
        maxr: rsb_int_t,
        maxt: rsb_time_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        nrhs: rsb_coo_idx_t,
        order: rsb_flags_t,
        Bp: *const ::std::os::raw::c_void,
        ldB: rsb_nnz_idx_t,
        betap: *const ::std::os::raw::c_void,
        Cp: *mut ::std::os::raw::c_void,
        ldC: rsb_nnz_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_tune_spsm(
        mtxOpp: *mut *mut rsb_mtx_t,
        sfp: *mut rsb_real_t,
        tnp: *mut rsb_int_t,
        maxr: rsb_int_t,
        maxt: rsb_time_t,
        transA: rsb_trans_t,
        alphap: *const ::std::os::raw::c_void,
        mtxAp: *const rsb_mtx_t,
        nrhs: rsb_coo_idx_t,
        order: rsb_flags_t,
        Bp: *const ::std::os::raw::c_void,
        ldB: rsb_nnz_idx_t,
        betap: *const ::std::os::raw::c_void,
        Cp: *mut ::std::os::raw::c_void,
        ldC: rsb_nnz_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_psblas_trans_to_rsb_trans(psbtrans: ::std::os::raw::c_char) -> rsb_trans_t;
}
extern "C" {
    pub fn rsb_file_mtx_save(mtxAp: *const rsb_mtx_t, filename: *const rsb_char_t) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_file_mtx_load(
        filename: *const rsb_char_t,
        flagsA: rsb_flags_t,
        typecode: rsb_type_t,
        errvalp: *mut rsb_err_t,
    ) -> *mut rsb_mtx_t;
}
extern "C" {
    pub fn rsb_file_vec_load(
        filename: *const rsb_char_t,
        typecode: rsb_type_t,
        Yp: *mut ::std::os::raw::c_void,
        yvlp: *mut rsb_coo_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_file_vec_save(
        filename: *const rsb_char_t,
        typecode: rsb_type_t,
        Yp: *const ::std::os::raw::c_void,
        yvl: rsb_coo_idx_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_file_mtx_get_dims(
        filename: *const rsb_char_t,
        nrp: *mut rsb_coo_idx_t,
        ncp: *mut rsb_coo_idx_t,
        nzp: *mut rsb_coo_idx_t,
        flagsp: *mut rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_coo_sort(
        VA: *mut ::std::os::raw::c_void,
        IA: *mut rsb_coo_idx_t,
        JA: *mut rsb_coo_idx_t,
        nnzA: rsb_nnz_idx_t,
        nrA: rsb_coo_idx_t,
        ncA: rsb_coo_idx_t,
        typecode: rsb_type_t,
        flagsA: rsb_flags_t,
    ) -> rsb_err_t;
}
extern "C" {
    pub fn rsb_time() -> rsb_time_t;
}
extern "C" {
    pub fn cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccos(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csin(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctan(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanh(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexp(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clog(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpow(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrt(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cabs(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __carg(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cproj(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __cimag(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn __creal(__z: __BindgenComplex<f64>) -> f64;
}
extern "C" {
    pub fn cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccosf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cacoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __casinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __catanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ccoshf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csinhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __ctanhf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cexpf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __clogf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cpowf(__x: __BindgenComplex<f32>, __y: __BindgenComplex<f32>)
        -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __csqrtf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cabsf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cargf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __conjf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn __cprojf(__z: __BindgenComplex<f32>) -> __BindgenComplex<f32>;
}
extern "C" {
    pub fn cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __cimagf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn __crealf(__z: __BindgenComplex<f32>) -> f32;
}
extern "C" {
    pub fn cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccosl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cacoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __casinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __catanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ccoshl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csinhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __ctanhl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cexpl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __clogl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cpowl(__x: __BindgenComplex<f64>, __y: __BindgenComplex<f64>)
        -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __csqrtl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cabsl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cargl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __conjl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn __cprojl(__z: __BindgenComplex<f64>) -> __BindgenComplex<f64>;
}
extern "C" {
    pub fn cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __cimagl(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn creall(__z: __BindgenComplex<f64>) -> u128;
}
extern "C" {
    pub fn __creall(__z: __BindgenComplex<f64>) -> u128;
}
#[doc = "< Row major."]
pub const blas_order_type_blas_rowmajor: blas_order_type = 101;
#[doc = "< Column major."]
pub const blas_order_type_blas_colmajor: blas_order_type = 102;
#[doc = " Used to specify a dense array's elements layout."]
pub type blas_order_type = ::std::os::raw::c_uint;
#[doc = "< No transposition."]
pub const blas_trans_type_blas_no_trans: blas_trans_type = 111;
#[doc = "< Transposition."]
pub const blas_trans_type_blas_trans: blas_trans_type = 112;
#[doc = "< Transposition and conjugation."]
pub const blas_trans_type_blas_conj_trans: blas_trans_type = 113;
#[doc = " Used to specify a transposition operator to a matrix operand."]
pub type blas_trans_type = ::std::os::raw::c_uint;
#[doc = "< Upper triangular matrix."]
pub const blas_uplo_type_blas_upper: blas_uplo_type = 121;
#[doc = "< Lower triangular matrix."]
pub const blas_uplo_type_blas_lower: blas_uplo_type = 122;
#[doc = " Specifies (#BLAS_ussp) or inquiries (#BLAS_usgp) upper or lower triangularity of a matrix."]
pub type blas_uplo_type = ::std::os::raw::c_uint;
#[doc = "< Unit diagional matrix."]
pub const blas_diag_type_blas_non_unit_diag: blas_diag_type = 131;
#[doc = "< Non unit diagional matrix (the default)."]
pub const blas_diag_type_blas_unit_diag: blas_diag_type = 132;
#[doc = " Specifies (#BLAS_ussp) or inquiries (#BLAS_usgp) whether the diagonal of a matrix is (implicitly) unitary or not."]
pub type blas_diag_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_side_type_blas_left_side: blas_side_type = 141;
#[doc = "< Unsupported."]
pub const blas_side_type_blas_right_side: blas_side_type = 142;
#[doc = " Unused/Unsupported."]
pub type blas_side_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_base: blas_cmach_type = 151;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_t: blas_cmach_type = 152;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_rnd: blas_cmach_type = 153;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_ieee: blas_cmach_type = 154;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_emin: blas_cmach_type = 155;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_emax: blas_cmach_type = 156;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_eps: blas_cmach_type = 157;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_prec: blas_cmach_type = 158;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_underflow: blas_cmach_type = 159;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_overflow: blas_cmach_type = 160;
#[doc = "< Unsupported."]
pub const blas_cmach_type_blas_sfmin: blas_cmach_type = 161;
#[doc = " Unused/Unsupported."]
pub type blas_cmach_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_one_norm: blas_norm_type = 171;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_real_one_norm: blas_norm_type = 172;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_two_norm: blas_norm_type = 173;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_frobenius_norm: blas_norm_type = 174;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_inf_norm: blas_norm_type = 175;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_real_inf_norm: blas_norm_type = 176;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_max_norm: blas_norm_type = 177;
#[doc = "< Unsupported."]
pub const blas_norm_type_blas_real_max_norm: blas_norm_type = 178;
#[doc = " Unused/Unsupported."]
pub type blas_norm_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_sort_type_blas_increasing_order: blas_sort_type = 181;
#[doc = "< Unsupported."]
pub const blas_sort_type_blas_decreasing_order: blas_sort_type = 182;
#[doc = " Unused/Unsupported."]
pub type blas_sort_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_conj_type_blas_conj: blas_conj_type = 191;
#[doc = "< Unsupported."]
pub const blas_conj_type_blas_no_conj: blas_conj_type = 192;
#[doc = " Unused/Unsupported."]
pub type blas_conj_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_jrot_type_blas_jrot_inner: blas_jrot_type = 201;
#[doc = "< Unsupported."]
pub const blas_jrot_type_blas_jrot_outer: blas_jrot_type = 202;
#[doc = "< Unsupported."]
pub const blas_jrot_type_blas_jrot_sorted: blas_jrot_type = 203;
#[doc = " Unused/Unsupported."]
pub type blas_jrot_type = ::std::os::raw::c_uint;
#[doc = "< Unsupported."]
pub const blas_prec_type_blas_prec_single: blas_prec_type = 211;
#[doc = "< Unsupported."]
pub const blas_prec_type_blas_prec_double: blas_prec_type = 212;
#[doc = "< Unsupported."]
pub const blas_prec_type_blas_prec_indigenous: blas_prec_type = 213;
#[doc = "< Unsupported."]
pub const blas_prec_type_blas_prec_extra: blas_prec_type = 214;
#[doc = " Unused/Unsupported."]
pub type blas_prec_type = ::std::os::raw::c_uint;
#[doc = "< Zero based indices (default when matrix created using the C interface)."]
pub const blas_base_type_blas_zero_base: blas_base_type = 221;
#[doc = "< Zero based indices (default when matrix created using the Fortran interface)."]
pub const blas_base_type_blas_one_base: blas_base_type = 222;
#[doc = " Index base (valid at matrix build/modify time)."]
pub type blas_base_type = ::std::os::raw::c_uint;
#[doc = "< General unsymmetric matrix (default). For #BLAS_usgp only."]
pub const blas_symmetry_type_blas_general: blas_symmetry_type = 231;
#[doc = "< Symmetric matrix (either #blas_lower_symmetric or #blas_upper_symmetric). For #BLAS_usgp only."]
pub const blas_symmetry_type_blas_symmetric: blas_symmetry_type = 232;
#[doc = "< Hermitian matrix (either #blas_lower_hermitian or #blas_upper_hermitian). For #BLAS_usgp only."]
pub const blas_symmetry_type_blas_hermitian: blas_symmetry_type = 233;
#[doc = "< Triangular matrix (either #blas_lower_triangular or #blas_upper_triangular). For #BLAS_usgp only."]
pub const blas_symmetry_type_blas_triangular: blas_symmetry_type = 234;
#[doc = "< Lower triangular matrix."]
pub const blas_symmetry_type_blas_lower_triangular: blas_symmetry_type = 235;
#[doc = "< Upper triangular matrix."]
pub const blas_symmetry_type_blas_upper_triangular: blas_symmetry_type = 236;
#[doc = "< Lower symmetric matrix."]
pub const blas_symmetry_type_blas_lower_symmetric: blas_symmetry_type = 237;
#[doc = "< Upper symmetric matrix."]
pub const blas_symmetry_type_blas_upper_symmetric: blas_symmetry_type = 238;
#[doc = "< Lower hermitian matrix."]
pub const blas_symmetry_type_blas_lower_hermitian: blas_symmetry_type = 239;
#[doc = "< Upper hermitian matrix."]
pub const blas_symmetry_type_blas_upper_hermitian: blas_symmetry_type = 240;
#[doc = " Symmetry properties. If not specified otherwise, valid for the both of #BLAS_ussp and #BLAS_usgp."]
pub type blas_symmetry_type = ::std::os::raw::c_uint;
#[doc = "< Will succeed if matrix is of 'C' or 'Z' type."]
pub const blas_field_type_blas_complex: blas_field_type = 241;
#[doc = "< Will succeed if matrix is of 'S' or 'D' type."]
pub const blas_field_type_blas_real: blas_field_type = 242;
#[doc = "< Will succeed if matrix is of 'D' or 'Z' type."]
pub const blas_field_type_blas_double_precision: blas_field_type = 243;
#[doc = "< Will succeed if matrix is of 'S' or 'C' type."]
pub const blas_field_type_blas_single_precision: blas_field_type = 244;
#[doc = " Numerical field type; can be used with #BLAS_usgp to inquiry about a matrix numerical type (1 will be returned in case of success, 0 in case of failure)."]
pub type blas_field_type = ::std::os::raw::c_uint;
#[doc = "< Get the matrix rows count."]
pub const blas_size_type_blas_num_rows: blas_size_type = 251;
#[doc = "< Get the matrix columns count."]
pub const blas_size_type_blas_num_cols: blas_size_type = 252;
#[doc = "< Get the matrix nonzeros count."]
pub const blas_size_type_blas_num_nonzeros: blas_size_type = 253;
#[doc = " Quantities that can be obtained via #BLAS_usgp."]
pub type blas_size_type = ::std::os::raw::c_uint;
#[doc = "< Used to check whether the handle is invalid."]
pub const blas_handle_type_blas_invalid_handle: blas_handle_type = 261;
#[doc = "< Will give 1 if the handle is new."]
pub const blas_handle_type_blas_new_handle: blas_handle_type = 262;
#[doc = "< will give 1 if the handle is open."]
pub const blas_handle_type_blas_open_handle: blas_handle_type = 263;
#[doc = "< Will give 1 if the handle is valid (that is, after #BLAS_duscr_end/#BLAS_zuscr_end/#BLAS_cuscr_end/#BLAS_zuscr_end)."]
pub const blas_handle_type_blas_valid_handle: blas_handle_type = 264;
#[doc = " The following are not fully implemented. Usable with #BLAS_usgp."]
pub type blas_handle_type = ::std::os::raw::c_uint;
#[doc = "< Will give 0."]
pub const blas_sparsity_optimization_type_blas_regular: blas_sparsity_optimization_type = 271;
#[doc = "< Will give 1."]
pub const blas_sparsity_optimization_type_blas_irregular: blas_sparsity_optimization_type = 272;
#[doc = "< Will give 0."]
pub const blas_sparsity_optimization_type_blas_block: blas_sparsity_optimization_type = 273;
#[doc = "< Complementary to #blas_valid_handle."]
pub const blas_sparsity_optimization_type_blas_unassembled: blas_sparsity_optimization_type = 274;
#[doc = " The following are usable with #BLAS_usgp only."]
pub type blas_sparsity_optimization_type = ::std::os::raw::c_uint;
#[doc = "< Turn on executing threads autotuning for #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. As an extension to the standard, the autotuning properties can be turned on/off at any time; if the autotuning feature has not been enabled at build time, using these properties will make the call fail. For more information, see #rsb_tune_spmm. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_autotuning_on: blas_rsb_ext_type = 6660;
#[doc = "< Turn off executing threads autotuning for #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_autotuning_off: blas_rsb_ext_type = 6661;
#[doc = "< Turn on executing threads autotuning for untransposed #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_n_autotuning_on: blas_rsb_ext_type = 6662;
#[doc = "< Turn on executing threads autotuning for untransposed #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_n_autotuning_off: blas_rsb_ext_type = 6663;
#[doc = "< Turn on executing threads autotuning for transposed #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_t_autotuning_on: blas_rsb_ext_type = 6664;
#[doc = "< Turn on executing threads autotuning for transposed #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv. See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_spmv_t_autotuning_off: blas_rsb_ext_type = 6665;
#[doc = "< Turn on executing threads autotuning for the next operation among #BLAS_dusmv, #BLAS_zusmv, #BLAS_susmv, #BLAS_cusmv). See #blas_rsb_spmv_autotuning_on. (EXPERIMENTAL)"]
pub const blas_rsb_ext_type_blas_rsb_autotune_next_operation: blas_rsb_ext_type = 6666;
#[doc = "< Request/check for RSB representation."]
pub const blas_rsb_ext_type_blas_rsb_rep_rsb: blas_rsb_ext_type = 9995;
#[doc = "< Request/check for CSR representation."]
pub const blas_rsb_ext_type_blas_rsb_rep_csr: blas_rsb_ext_type = 9996;
#[doc = "< Request/check for COO representation."]
pub const blas_rsb_ext_type_blas_rsb_rep_coo: blas_rsb_ext_type = 9997;
#[doc = "< Request/check for duplicate nonzeroes overwriting policy."]
pub const blas_rsb_ext_type_blas_rsb_duplicates_ovw: blas_rsb_ext_type = 9998;
#[doc = "< Request/check for duplicate nonzeroes summation policy."]
pub const blas_rsb_ext_type_blas_rsb_duplicates_sum: blas_rsb_ext_type = 9999;
#[doc = " Properties suitable to be used with #BLAS_ussp/#BLAS_usgp. All of these are not in the Sparse BLAS standard."]
pub type blas_rsb_ext_type = ::std::os::raw::c_uint;
#[doc = " the sparse matrix descriptor type"]
pub type blas_sparse_matrix = ::std::os::raw::c_int;
extern "C" {
    pub fn BLAS_susdot(
        conj: blas_conj_type,
        nnz: ::std::os::raw::c_int,
        x: *const f32,
        indx: *const ::std::os::raw::c_int,
        y: *const f32,
        incy: ::std::os::raw::c_int,
        r: *mut f32,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susdot_(
        conj: *mut blas_conj_type,
        nnz: *mut ::std::os::raw::c_int,
        x: *const f32,
        indx: *const ::std::os::raw::c_int,
        y: *const f32,
        incy: *mut ::std::os::raw::c_int,
        r: *mut f32,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusdot(
        conj: blas_conj_type,
        nnz: ::std::os::raw::c_int,
        x: *const f64,
        indx: *const ::std::os::raw::c_int,
        y: *const f64,
        incy: ::std::os::raw::c_int,
        r: *mut f64,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusdot_(
        conj: *mut blas_conj_type,
        nnz: *mut ::std::os::raw::c_int,
        x: *const f64,
        indx: *const ::std::os::raw::c_int,
        y: *const f64,
        incy: *mut ::std::os::raw::c_int,
        r: *mut f64,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusdot(
        conj: blas_conj_type,
        nnz: ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        r: *mut ::std::os::raw::c_void,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusdot_(
        conj: *mut blas_conj_type,
        nnz: *mut ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        r: *mut ::std::os::raw::c_void,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusdot(
        conj: blas_conj_type,
        nnz: ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        r: *mut ::std::os::raw::c_void,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusdot_(
        conj: *mut blas_conj_type,
        nnz: *mut ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        r: *mut ::std::os::raw::c_void,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susaxpy(
        nnz: ::std::os::raw::c_int,
        alpha: f32,
        x: *const f32,
        indx: *const ::std::os::raw::c_int,
        y: *mut f32,
        incy: ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susaxpy_(
        nnz: *mut ::std::os::raw::c_int,
        alpha: *mut f32,
        x: *const f32,
        indx: *const ::std::os::raw::c_int,
        y: *mut f32,
        incy: *mut ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusaxpy(
        nnz: ::std::os::raw::c_int,
        alpha: f64,
        x: *const f64,
        indx: *const ::std::os::raw::c_int,
        y: *mut f64,
        incy: ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusaxpy_(
        nnz: *mut ::std::os::raw::c_int,
        alpha: *mut f64,
        x: *const f64,
        indx: *const ::std::os::raw::c_int,
        y: *mut f64,
        incy: *mut ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusaxpy(
        nnz: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusaxpy_(
        nnz: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusaxpy(
        nnz: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusaxpy_(
        nnz: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        x: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susga(
        nnz: ::std::os::raw::c_int,
        y: *const f32,
        incy: ::std::os::raw::c_int,
        x: *mut f32,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susga_(
        nnz: *mut ::std::os::raw::c_int,
        y: *const f32,
        incy: *mut ::std::os::raw::c_int,
        x: *mut f32,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusga(
        nnz: ::std::os::raw::c_int,
        y: *const f64,
        incy: ::std::os::raw::c_int,
        x: *mut f64,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusga_(
        nnz: *mut ::std::os::raw::c_int,
        y: *const f64,
        incy: *mut ::std::os::raw::c_int,
        x: *mut f64,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusga(
        nnz: ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusga_(
        nnz: *mut ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusga(
        nnz: ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusga_(
        nnz: *mut ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susgz(
        nnz: ::std::os::raw::c_int,
        y: *mut f32,
        incy: ::std::os::raw::c_int,
        x: *mut f32,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susgz_(
        nnz: *mut ::std::os::raw::c_int,
        y: *mut f32,
        incy: *mut ::std::os::raw::c_int,
        x: *mut f32,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusgz(
        nnz: ::std::os::raw::c_int,
        y: *mut f64,
        incy: ::std::os::raw::c_int,
        x: *mut f64,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusgz_(
        nnz: *mut ::std::os::raw::c_int,
        y: *mut f64,
        incy: *mut ::std::os::raw::c_int,
        x: *mut f64,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusgz(
        nnz: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusgz_(
        nnz: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusgz(
        nnz: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusgz_(
        nnz: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        x: *mut ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_sussc(
        nnz: ::std::os::raw::c_int,
        x: *const f32,
        y: *mut f32,
        incy: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_sussc_(
        nnz: *mut ::std::os::raw::c_int,
        x: *const f32,
        y: *mut f32,
        incy: *mut ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dussc(
        nnz: ::std::os::raw::c_int,
        x: *const f64,
        y: *mut f64,
        incy: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dussc_(
        nnz: *mut ::std::os::raw::c_int,
        x: *const f64,
        y: *mut f64,
        incy: *mut ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cussc(
        nnz: ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cussc_(
        nnz: *mut ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zussc(
        nnz: ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: blas_base_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zussc_(
        nnz: *mut ::std::os::raw::c_int,
        x: *const ::std::os::raw::c_void,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        index_base: *mut blas_base_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susmv(
        transA: blas_trans_type,
        alpha: f32,
        A: blas_sparse_matrix,
        x: *const f32,
        incx: ::std::os::raw::c_int,
        y: *mut f32,
        incy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susmv_(
        transA: *mut blas_trans_type,
        alpha: *mut f32,
        A: *mut blas_sparse_matrix,
        x: *const f32,
        incx: *mut ::std::os::raw::c_int,
        y: *mut f32,
        incy: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusmv(
        transA: blas_trans_type,
        alpha: f64,
        A: blas_sparse_matrix,
        x: *const f64,
        incx: ::std::os::raw::c_int,
        y: *mut f64,
        incy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusmv_(
        transA: *mut blas_trans_type,
        alpha: *mut f64,
        A: *mut blas_sparse_matrix,
        x: *const f64,
        incx: *mut ::std::os::raw::c_int,
        y: *mut f64,
        incy: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusmv(
        transA: blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        A: blas_sparse_matrix,
        x: *const ::std::os::raw::c_void,
        incx: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusmv_(
        transA: *mut blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        A: *mut blas_sparse_matrix,
        x: *const ::std::os::raw::c_void,
        incx: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusmv(
        transA: blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        A: blas_sparse_matrix,
        x: *const ::std::os::raw::c_void,
        incx: ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusmv_(
        transA: *mut blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        A: *mut blas_sparse_matrix,
        x: *const ::std::os::raw::c_void,
        incx: *mut ::std::os::raw::c_int,
        y: *mut ::std::os::raw::c_void,
        incy: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_sussv(
        transT: blas_trans_type,
        alpha: f32,
        T: blas_sparse_matrix,
        x: *mut f32,
        incx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_sussv_(
        transT: *mut blas_trans_type,
        alpha: *mut f32,
        T: *mut blas_sparse_matrix,
        x: *mut f32,
        incx: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dussv(
        transT: blas_trans_type,
        alpha: f64,
        T: blas_sparse_matrix,
        x: *mut f64,
        incx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dussv_(
        transT: *mut blas_trans_type,
        alpha: *mut f64,
        T: *mut blas_sparse_matrix,
        x: *mut f64,
        incx: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cussv(
        transT: blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        T: blas_sparse_matrix,
        x: *mut ::std::os::raw::c_void,
        incx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cussv_(
        transT: *mut blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        T: *mut blas_sparse_matrix,
        x: *mut ::std::os::raw::c_void,
        incx: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zussv(
        transT: blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        T: blas_sparse_matrix,
        x: *mut ::std::os::raw::c_void,
        incx: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zussv_(
        transT: *mut blas_trans_type,
        alpha: *const ::std::os::raw::c_void,
        T: *mut blas_sparse_matrix,
        x: *mut ::std::os::raw::c_void,
        incx: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susmm(
        order: blas_order_type,
        transA: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: f32,
        A: blas_sparse_matrix,
        b: *const f32,
        ldb: ::std::os::raw::c_int,
        c: *mut f32,
        ldc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susmm_(
        order: *mut blas_order_type,
        transA: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *mut f32,
        A: *mut blas_sparse_matrix,
        b: *const f32,
        ldb: *mut ::std::os::raw::c_int,
        c: *mut f32,
        ldc: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusmm(
        order: blas_order_type,
        transA: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: f64,
        A: blas_sparse_matrix,
        b: *const f64,
        ldb: ::std::os::raw::c_int,
        c: *mut f64,
        ldc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusmm_(
        order: *mut blas_order_type,
        transA: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *mut f64,
        A: *mut blas_sparse_matrix,
        b: *const f64,
        ldb: *mut ::std::os::raw::c_int,
        c: *mut f64,
        ldc: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusmm(
        order: blas_order_type,
        transA: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        A: blas_sparse_matrix,
        b: *const ::std::os::raw::c_void,
        ldb: ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_void,
        ldc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusmm_(
        order: *mut blas_order_type,
        transA: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        A: *mut blas_sparse_matrix,
        b: *const ::std::os::raw::c_void,
        ldb: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_void,
        ldc: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusmm(
        order: blas_order_type,
        transA: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        A: blas_sparse_matrix,
        b: *const ::std::os::raw::c_void,
        ldb: ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_void,
        ldc: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusmm_(
        order: *mut blas_order_type,
        transA: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        A: *mut blas_sparse_matrix,
        b: *const ::std::os::raw::c_void,
        ldb: *mut ::std::os::raw::c_int,
        c: *mut ::std::os::raw::c_void,
        ldc: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_sussm(
        order: blas_order_type,
        transT: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: f32,
        T: blas_sparse_matrix,
        b: *mut f32,
        ldb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_sussm_(
        order: *mut blas_order_type,
        transT: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *mut f32,
        T: *mut blas_sparse_matrix,
        b: *mut f32,
        ldb: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dussm(
        order: blas_order_type,
        transT: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: f64,
        T: blas_sparse_matrix,
        b: *mut f64,
        ldb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dussm_(
        order: *mut blas_order_type,
        transT: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *mut f64,
        T: *mut blas_sparse_matrix,
        b: *mut f64,
        ldb: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cussm(
        order: blas_order_type,
        transT: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        T: blas_sparse_matrix,
        b: *mut ::std::os::raw::c_void,
        ldb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cussm_(
        order: *mut blas_order_type,
        transT: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        T: *mut blas_sparse_matrix,
        b: *mut ::std::os::raw::c_void,
        ldb: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zussm(
        order: blas_order_type,
        transT: blas_trans_type,
        nrhs: ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        T: blas_sparse_matrix,
        b: *mut ::std::os::raw::c_void,
        ldb: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zussm_(
        order: *mut blas_order_type,
        transT: *mut blas_trans_type,
        nrhs: *mut ::std::os::raw::c_int,
        alpha: *const ::std::os::raw::c_void,
        T: *mut blas_sparse_matrix,
        b: *mut ::std::os::raw::c_void,
        ldb: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_begin(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_suscr_begin_(
        m: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_begin(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_duscr_begin_(
        m: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_begin(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_cuscr_begin_(
        m: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_begin(
        m: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_zuscr_begin_(
        m: *mut ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_suscr_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        k: *mut ::std::os::raw::c_int,
        l: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_duscr_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        k: *mut ::std::os::raw::c_int,
        l: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_cuscr_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        k: *mut ::std::os::raw::c_int,
        l: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_zuscr_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        k: *mut ::std::os::raw::c_int,
        l: *mut ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_variable_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_suscr_variable_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_variable_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_duscr_variable_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_variable_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_cuscr_variable_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_variable_block_begin(
        Mb: ::std::os::raw::c_int,
        Nb: ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn blas_zuscr_variable_block_begin_(
        Mb: *mut ::std::os::raw::c_int,
        Nb: *mut ::std::os::raw::c_int,
        K: *const ::std::os::raw::c_int,
        L: *const ::std::os::raw::c_int,
        A: *mut blas_sparse_matrix,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_end(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_end_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_duscr_end(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_end_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_cuscr_end(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_end_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_zuscr_end(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_end_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_suscr_insert_entry(
        A: blas_sparse_matrix,
        val: f32,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_entry_(
        A: *mut blas_sparse_matrix,
        val: *mut f32,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_entry(
        A: blas_sparse_matrix,
        val: f64,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_entry_(
        A: *mut blas_sparse_matrix,
        val: *mut f64,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_entry(
        A: blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_entry_(
        A: *mut blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_entry(
        A: blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_entry_(
        A: *mut blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_insert_entries(
        A: blas_sparse_matrix,
        nnz: ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_entries_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_entries(
        A: blas_sparse_matrix,
        nnz: ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_entries_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_entries(
        A: blas_sparse_matrix,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_entries_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_entries(
        A: blas_sparse_matrix,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_entries_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_insert_col(
        A: blas_sparse_matrix,
        j: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_col_(
        A: *mut blas_sparse_matrix,
        j: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_col(
        A: blas_sparse_matrix,
        j: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_col_(
        A: *mut blas_sparse_matrix,
        j: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_col(
        A: blas_sparse_matrix,
        j: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_col_(
        A: *mut blas_sparse_matrix,
        j: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_col(
        A: blas_sparse_matrix,
        j: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_col_(
        A: *mut blas_sparse_matrix,
        j: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_insert_row(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_row_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f32,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_row(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_row_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const f64,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_row(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_row_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_row(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        nnz: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_row_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        indx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_insert_clique(
        A: blas_sparse_matrix,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        val: *const f32,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_clique_(
        A: *mut blas_sparse_matrix,
        k: *const ::std::os::raw::c_int,
        l: *const ::std::os::raw::c_int,
        val: *const f32,
        row_stride: *const ::std::os::raw::c_int,
        col_stride: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_clique(
        A: blas_sparse_matrix,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        val: *const f64,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_clique_(
        A: *mut blas_sparse_matrix,
        k: *const ::std::os::raw::c_int,
        l: *const ::std::os::raw::c_int,
        val: *const f64,
        row_stride: *const ::std::os::raw::c_int,
        col_stride: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_clique(
        A: blas_sparse_matrix,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_clique_(
        A: *mut blas_sparse_matrix,
        k: *const ::std::os::raw::c_int,
        l: *const ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        row_stride: *const ::std::os::raw::c_int,
        col_stride: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_clique(
        A: blas_sparse_matrix,
        k: ::std::os::raw::c_int,
        l: ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_clique_(
        A: *mut blas_sparse_matrix,
        k: *const ::std::os::raw::c_int,
        l: *const ::std::os::raw::c_int,
        val: *const ::std::os::raw::c_void,
        row_stride: *const ::std::os::raw::c_int,
        col_stride: *const ::std::os::raw::c_int,
        indx: *const ::std::os::raw::c_int,
        jndx: *const ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_suscr_insert_block(
        A: blas_sparse_matrix,
        val: *const f32,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_suscr_insert_block_(
        A: *mut blas_sparse_matrix,
        val: *const f32,
        row_stride: *mut ::std::os::raw::c_int,
        col_stride: *mut ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_duscr_insert_block(
        A: blas_sparse_matrix,
        val: *const f64,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_duscr_insert_block_(
        A: *mut blas_sparse_matrix,
        val: *const f64,
        row_stride: *mut ::std::os::raw::c_int,
        col_stride: *mut ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cuscr_insert_block(
        A: blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cuscr_insert_block_(
        A: *mut blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        row_stride: *mut ::std::os::raw::c_int,
        col_stride: *mut ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zuscr_insert_block(
        A: blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        row_stride: ::std::os::raw::c_int,
        col_stride: ::std::os::raw::c_int,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zuscr_insert_block_(
        A: *mut blas_sparse_matrix,
        val: *const ::std::os::raw::c_void,
        row_stride: *mut ::std::os::raw::c_int,
        col_stride: *mut ::std::os::raw::c_int,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_uscr_end(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_uscr_end_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_usds(A: blas_sparse_matrix) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_usds_(A: *mut blas_sparse_matrix, istat: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn BLAS_susrows_scale(
        A: blas_sparse_matrix,
        d: *const f32,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susrows_scale_(
        A: *mut blas_sparse_matrix,
        d: *const f32,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusrows_scale(
        A: blas_sparse_matrix,
        d: *const f64,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusrows_scale_(
        A: *mut blas_sparse_matrix,
        d: *const f64,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusrows_scale(
        A: blas_sparse_matrix,
        d: *const ::std::os::raw::c_void,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusrows_scale_(
        A: *mut blas_sparse_matrix,
        d: *const ::std::os::raw::c_void,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusrows_scale(
        A: blas_sparse_matrix,
        d: *const ::std::os::raw::c_void,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusrows_scale_(
        A: *mut blas_sparse_matrix,
        d: *const ::std::os::raw::c_void,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_diag(A: blas_sparse_matrix, d: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_diag_(
        A: *mut blas_sparse_matrix,
        d: *mut f32,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_diag(A: blas_sparse_matrix, d: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_diag_(
        A: *mut blas_sparse_matrix,
        d: *mut f64,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_diag(
        A: blas_sparse_matrix,
        d: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_diag_(
        A: *mut blas_sparse_matrix,
        d: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_diag(
        A: blas_sparse_matrix,
        d: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_diag_(
        A: *mut blas_sparse_matrix,
        d: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_rows_nnz(
        A: blas_sparse_matrix,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_rows_nnz_(
        A: *mut blas_sparse_matrix,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_rows_nnz(
        A: blas_sparse_matrix,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_rows_nnz_(
        A: *mut blas_sparse_matrix,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_rows_nnz(
        A: blas_sparse_matrix,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_rows_nnz_(
        A: *mut blas_sparse_matrix,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_rows_nnz(
        A: blas_sparse_matrix,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_rows_nnz_(
        A: *mut blas_sparse_matrix,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        nnzp: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_rows_sparse(
        A: blas_sparse_matrix,
        VA: *mut f32,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_rows_sparse_(
        A: *mut blas_sparse_matrix,
        VA: *mut f32,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_rows_sparse(
        A: blas_sparse_matrix,
        VA: *mut f64,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_rows_sparse_(
        A: *mut blas_sparse_matrix,
        VA: *mut f64,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_rows_sparse(
        A: blas_sparse_matrix,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_rows_sparse_(
        A: *mut blas_sparse_matrix,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_rows_sparse(
        A: blas_sparse_matrix,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: ::std::os::raw::c_int,
        lr: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_rows_sparse_(
        A: *mut blas_sparse_matrix,
        VA: *mut ::std::os::raw::c_void,
        IA: *mut ::std::os::raw::c_int,
        JA: *mut ::std::os::raw::c_int,
        nnz: *mut ::std::os::raw::c_int,
        fr: *mut ::std::os::raw::c_int,
        lr: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_matrix_nnz(
        A: blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_matrix_nnz_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_matrix_nnz(
        A: blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_matrix_nnz_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_matrix_nnz(
        A: blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_matrix_nnz_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_matrix_nnz(
        A: blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_matrix_nnz_(
        A: *mut blas_sparse_matrix,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_infinity_norm(
        A: blas_sparse_matrix,
        in_: *mut f32,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_infinity_norm_(
        A: *mut blas_sparse_matrix,
        in_: *mut f32,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_infinity_norm(
        A: blas_sparse_matrix,
        in_: *mut f64,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_infinity_norm_(
        A: *mut blas_sparse_matrix,
        in_: *mut f64,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_infinity_norm(
        A: blas_sparse_matrix,
        in_: *mut ::std::os::raw::c_void,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_infinity_norm_(
        A: *mut blas_sparse_matrix,
        in_: *mut ::std::os::raw::c_void,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_infinity_norm(
        A: blas_sparse_matrix,
        in_: *mut ::std::os::raw::c_void,
        trans: blas_trans_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_infinity_norm_(
        A: *mut blas_sparse_matrix,
        in_: *mut ::std::os::raw::c_void,
        trans: *mut blas_trans_type,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susset_elements(
        A: blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const f32,
        nnz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susset_elements_(
        A: *mut blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const f32,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusset_elements(
        A: blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const f64,
        nnz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusset_elements_(
        A: *mut blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const f64,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusset_elements(
        A: blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const ::std::os::raw::c_void,
        nnz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusset_elements_(
        A: *mut blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const ::std::os::raw::c_void,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusset_elements(
        A: blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const ::std::os::raw::c_void,
        nnz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusset_elements_(
        A: *mut blas_sparse_matrix,
        ia: *const ::std::os::raw::c_int,
        ja: *const ::std::os::raw::c_int,
        va: *const ::std::os::raw::c_void,
        nnz: *mut ::std::os::raw::c_int,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susset_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susset_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut f32,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusset_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusset_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut f64,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusset_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusset_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusset_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusset_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_susget_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_susget_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut f32,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_dusget_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_dusget_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut f64,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_cusget_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_cusget_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn BLAS_zusget_element(
        A: blas_sparse_matrix,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blas_zusget_element_(
        A: *mut blas_sparse_matrix,
        i: *mut ::std::os::raw::c_int,
        j: *mut ::std::os::raw::c_int,
        v: *mut ::std::os::raw::c_void,
        istat: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rsb_wp__BLAS_ussp(
        A: blas_sparse_matrix,
        pname: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsb_wp__BLAS_usgp(
        A: blas_sparse_matrix,
        pname: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsb_load_spblas_matrix_file_as_matrix_market(
        filename: *const rsb_char_t,
        typecode: rsb_type_t,
    ) -> blas_sparse_matrix;
}
extern "C" {
    pub fn rsb_blas_get_mtx(A: blas_sparse_matrix) -> *mut rsb_mtx_t;
}
